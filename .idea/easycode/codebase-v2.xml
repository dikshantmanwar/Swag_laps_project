<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="com.obiscr.chatgpt.settings.EasyCodeState">
    <option name="projectFiles" value="$PROJECT_DIR$/PageObject/__init__.py;C:/Users/Admin/PycharmProjects/Swag_Labs_Project/PageObject/By_Product.py;C:/Users/Admin/PycharmProjects/Swag_Labs_Project/PageObject/LoginPage.py;C:/Users/Admin/PycharmProjects/Swag_Labs_Project/Reports/report.html;C:/Users/Admin/PycharmProjects/Swag_Labs_Project/Reports/report_param.html;C:/Users/Admin/PycharmProjects/Swag_Labs_Project/testCases/__init__.py;C:/Users/Admin/PycharmProjects/Swag_Labs_Project/testCases/conftest.py;C:/Users/Admin/PycharmProjects/Swag_Labs_Project/testCases/test_By_product.py;C:/Users/Admin/PycharmProjects/Swag_Labs_Project/testCases/test_login.py;C:/Users/Admin/PycharmProjects/Swag_Labs_Project/testCases/test_login_param.py;C:/Users/Admin/PycharmProjects/Swag_Labs_Project/Utilities/__init__.py;C:/Users/Admin/PycharmProjects/Swag_Labs_Project/Utilities/Logger.py;C:/Users/Admin/PycharmProjects/Swag_Labs_Project/Utilities/readproperties.py" />
    <option name="forceFullIndex" value="false" />
    <option name="fileSummaryMaps" value="{&quot;C:/Users/Admin/PycharmProjects/Swag_Labs_Project&quot;:&quot;{\&quot;/testCases/__init__.py\&quot;:\&quot;This __init__.py file is used to mark a directory as a Python package. Some key things about it:\\n\\n- It allows the testCases directory to be considered a Python package so that it can be imported using import testCases.\\n\\n- It does not need to contain any code - its presence alone marks the directory as a package. \\n\\n- Common uses of __init__.py include:\\n  - Importing submodules/functions from the package\\n  - Setting up package-level configurations\\n  - Providing a __all__ list to control what gets imported when using from package import *\\n\\n- It allows code within the testCases directory to reference other modules within the package without specifying the full package path.\\n\\nSo in summary:\\n\\n- Marks a directory as a Python package \\n- Allows importing the package and any submodules/functions\\n- Can contain package-level initialization code if needed\\n- Not required to contain any code, its presence alone defines it as a package\\n\\nThe key function is to define the testCases directory as a Python package, even though this particular file may be empty. No other specific functions are implied since it can contain various initialization/import code as needed.\&quot;,\&quot;/testCases/test_By_product.py\&quot;:\&quot;This test_By_product.py file contains an end-to-end test for adding products to cart and completing the checkout process on the Sauce Labs demo site.\\n\\nKey things it does:\\n\\n1. Imports necessary libraries like Selenium, page object model classes, logger etc. \\n\\n2. Defines the test class Test_By_Prodct with setup and teardown methods\\n\\n3. Gets test data like URL, username, password from a config file \\n\\n4. Launches the browser and navigates to login page\\n\\n5. Logs in using username and password \\n\\n6. Clicks on specific product elements like backpack, t-shirt using locators \\n\\n7. Clicks on cart icon and navigates to checkout page\\n\\n8. Enters shipping details like name, postal code \\n\\n9. Clicks on continue and finish buttons to complete checkout\\n\\n10. Closes the browser after test\\n\\n11. Logs test steps and outputs using the custom logger class\\n\\nKey functions:\\n\\n- test_by_product() - Main test method \\n- get_username(), get_password() - Helper methods to enter login details\\n- click_on_backpack(), click_on_t_shirt() - Helper methods to select products  \\n- click_on_cart_icon(), click_on_checkout() - Helper methods for navigation\\n- enter_first_name() etc - Helper methods to enter form details\\n\\nSo in summary, it is an end-to-end test automation script for the Sauce Labs demo site checkout flow.\&quot;,\&quot;/PageObject/By_Product.py\&quot;:\&quot;This file defines a ProductPage page object model (POM) class for interacting with the product page in an e-commerce site.\\n\\nKey functions:\\n\\n- click_on_backpack() - Clicks on the backpack product\\n- click_on_t_shirt() - Clicks on the T-shirt product  \\n- click_on_cart_icon() - Clicks on the shopping cart icon\\n- click_on_checkout() - Clicks on the checkout button\\n- enter_first_name() - Enters a first name in the name field\\n- enter_last_name() - Enters a last name in the name field\\n- enter_postal_code() - Enters a postal code \\n- click_on_continue_btn() - Clicks the continue button\\n- click_on_finish_btn() - Clicks the finish button\\n\\nIt defines locators for each element as class attributes. The __init__() method initializes the WebDriver and implicit wait. Each action method interacts with a specific page element using the locators.\\n\\nThis allows encapsulating and reusing actions on the product page in a clean, object-oriented way for test automation. The page object model improves maintainability by separating UI logic from tests.\&quot;,\&quot;/Reports/report.html\&quot;:\&quot;This file (report.html) is an HTML report generated by pytest-html plugin to display the results of pytest tests.\\n\\nSome key things it does:\\n\\n- Displays summary information like number of tests run, durations, pass/fail counts\\n- Renders a table with test results - name, result, duration\\n- Allows sorting the table by clicking column headers\\n- Shows/hides extra details for each test like logs/errors on click  \\n- Filters tests based on checkboxes for different results\\n\\nKey functions:\\n\\n- init() - initializes the report on page load\\n- sortColumn() - sorts table by column click\\n- show/hideExtras() - toggles extra details visibility\\n- addCollapse() - adds expand/collapse links to rows\\n- getQueryParameter() - gets params from URL\\n- filterTable() - filters rows based on checkbox\\n- keyAlpha/keyLink/keyResult - sorting key functions\\n- resetSortHeaders() - resets sorting icons\\n- toggleSortStates() - toggles sorting icons/states\\n\\nSo in summary, it displays the pytest test results in an interactive HTML report with sorting, filtering and expanding capabilities.\&quot;,\&quot;/testCases/conftest.py\&quot;:\&quot;This conftest.py file is used to define fixtures and hooks for pytest.\\n\\nKey things it does:\\n\\n1. Defines a pytest_addoption hook to add a command line option \\\&quot;--browser\\\&quot; to select the browser.\\n\\n2. Defines a browser fixture that returns the selected browser from the command line option. \\n\\n3. Defines a setup fixture that initializes the webdriver based on the browser. It handles Chrome and Edge browsers.\\n\\n4. Defines a getDataForLogin fixture that parametrizes login test data with different username/password combinations. \\n\\n5. Defines two pytest HTML reporting hooks:\\n\\n   - pytest_html_report_title to customize the report title\\n\\n   - pytest_html_results_summary to add a custom header to the results summary\\n\\nSo in summary:\\n\\n- It defines fixtures for browser selection, webdriver initialization and test data parametrization\\n- It customizes the pytest HTML report title and adds a header to results summary\\n\\nThis allows setting up the browser, initializing tests with different data and customizing the HTML reports for pytest tests.\&quot;,\&quot;/Utilities/readproperties.py\&quot;:\&quot;This file is used to read configuration values from a properties file (config.ini in this case) and provide methods to access those values.\\n\\nKey things it does:\\n\\n- Imports ConfigParser to parse the ini configuration file\\n- Reads the config.ini file and stores it in the config ConfigParser object\\n- Defines a ReadValue class with static methods to retrieve values\\n- getusername() method returns the username value from the config file\\n- getPassword() method returns the password value \\n- getUrl() method returns the URL value\\n\\nSo in summary:\\n\\n- It parses a config.ini file to read configuration values\\n- Provides a clean interface via static methods to retrieve those values by name\\n- The main functions are getusername(), getPassword(), getUrl() to access login credentials and URL from the config file in a reusable way.\\n\\nThis allows centralizing configuration outside of code and accessing it in a standardized way across the test automation project.\&quot;,\&quot;/Utilities/Logger.py\&quot;:\&quot;This Utilities/Logger.py file is used to generate loggers for logging purposes.\\n\\nIt contains a LogGen class with a static loggen() method that is used to generate loggers.\\n\\nKey functions:\\n\\n- loggen() - The main method that generates and configures loggers.\\n\\n- It uses inspect.stack() to get the calling class name. This is used as the logger name.\\n\\n- It initializes a logger with the calling class name. \\n\\n- It initializes a FileHandler to log to a logfile.log file in the Logs directory.\\n\\n- It sets a custom log format string to include timestamp, level, name, function and message.\\n\\n- The FileHandler is configured with the formatter.\\n\\n- The FileHandler is added to the logger. \\n\\n- The logger level is set to INFO.\\n\\n- The configured logger is returned to the caller to use for logging.\\n\\nSo in summary, it provides a reusable way to generate configured loggers that log to a file, with caller context included in the log format. The loggen() method handles all the logger initialization and configuration.\&quot;,\&quot;/testCases/test_login.py\&quot;:\&quot;This file contains test cases for login functionality.\\n\\nKey things it does:\\n\\n1. Imports necessary modules - pytest, utilities to read properties and log, page object model for login page.\\n\\n2. Defines a TestUrlLogin class with a test_login method. This method will be executed as a test case. \\n\\n3. Gets the URL, username, password from properties file using utilities.\\n\\n4. Initializes the logger. \\n\\n5. Launches the URL in setup browser. \\n\\n6. Initializes the LoginPage object.\\n\\n7. Enters username and password using page object methods. \\n\\n8. Clicks login button.\\n\\n9. Validates login was successful by checking login status. \\n\\n10. Takes screenshot on success. \\n\\n11. Clicks logout and validates.\\n\\n12. Takes screenshot on logout.\\n\\n13. Asserts test passed or failed.\\n\\n14. Closes the browser.\\n\\n15. Logs completion.\\n\\nSo in summary, it contains a single test case to test full login and logout flow by using page object model and utilities.\&quot;,\&quot;/Reports/report_param.html\&quot;:\&quot;This HTML file is a test report generated by pytest-html.\\n\\nKey things it does:\\n\\n- Displays summary information like number of tests run, duration, pass/fail counts\\n- Renders the results table with test names, durations, results\\n- Allows sorting the results table by clicking column headers\\n- Adds expand/collapse functionality to show extra details for each test  \\n- Filters the results table based on passed/failed checkboxes\\n\\nKey functions:\\n\\n- init() - initializes the report on page load, adds sorting and filtering \\n- sortColumn() - sorts the results table by a column\\n- show/hideExtras() - expands/collapses extra details for a test\\n- addCollapse() - adds the expand/collapse links to each test row\\n- getQueryParameter() - gets params from the URL \\n- sortTable() - re-renders the table after sorting\\n- filterTable() - hides rows based on filter checkboxes\\n- keyAlpha/keyLink/keyResult() - key functions for sorting text/links/results\\n\\nSo in summary, it displays the test results in an interactive HTML table with sorting, filtering and expandable details.\&quot;,\&quot;/PageObject/__init__.py\&quot;:\&quot;The __init__.py file in a PageObject directory in Python is used to initialize that directory as a package. Some key things about it:\\n\\n- Allows the directory to be considered a Python package so it can be imported.\\n\\n- Usually empty, but can contain package-level code like importing submodules or setting up logging.\\n\\n- Tells Python that the directory should be treated as containing Python package code.\\n\\n- Allows submodules within the directory to be imported via the package path (e.g. package.submodule) rather than needing to be in sys.path.\\n\\n- Common functions it may contain:\\n\\n  - Import statements to load submodules within the package\\n\\n  - Logging configuration\\n\\n  - Package-level constants or variables\\n\\n  - Initialization/setup code that needs to run when the package is imported\\n\\nSo in summary, the __init__.py in a PageObject directory:\\n\\n- Marks it as a Python package \\n- Allows import of submodules via the package path\\n- Can contain package-level initialization/import code\\n\\nIt establishes the directory as a place that contains reusable Python code packaged as a module.\&quot;,\&quot;/PageObject/LoginPage.py\&quot;:\&quot;This file defines a LoginPage page object class for automating login functionality in a web application.\\n\\nKey functions:\\n\\n- get_username() - Enters a username into the username input field.\\n\\n- get_password() - Enters a password into the password input field. \\n\\n- click_on_login() - Clicks the login button to submit the login form.\\n\\n- click_on_menu() - Clicks the menu button, which would be visible after a successful login.\\n\\n- click_on_logout() - Clicks the logout button to log the user out.\\n\\n- login_status() - Checks if the user is logged in by looking for the presence of the menu button. Returns True/False.\\n\\nThe class encapsulates the login page elements and actions into reusable methods. This allows test code to interact with the login page at a higher level by calling these functions, rather than having to find elements and perform actions directly. It abstracts away the implementation details and makes the tests more readable and maintainable.\&quot;,\&quot;/testCases/test_login_param.py\&quot;:\&quot;This Python file defines a test case class to test the login functionality of a web application using parameterization.\\n\\nKey things it does:\\n\\n1. Imports necessary utilities like reading properties, logging, page object model classes.\\n\\n2. Defines a Test_url_login class with setup like driver, url, logger objects. \\n\\n3. Defines a test method test_login_using_param that takes setup and login data as parameters.\\n\\n4. Gets login data from parameter and enters username, password on login page. \\n\\n5. Clicks login and validates login status based on expected result from data. \\n\\n6. Takes screenshots on success and failure.\\n\\n7. Logs out if login succeeds and appends result to list.\\n\\n8. Validates final result list against expected and asserts test pass/fail.\\n\\n9. Closes driver at the end.\\n\\nKey functions:\\n\\n- get_username(), get_password() - To enter login credentials\\n- login_status() - To validate login \\n- click_on_menu(), click_on_logout() - To logout after login\\n- getUrl() - To get URL from properties\\n- loggen() - To initialize logger\\n\\nSo in summary, it is a parameterized login test case class using page object model and utilities.\&quot;,\&quot;/Utilities/__init__.py\&quot;:\&quot;This __init__.py file is located in a Utilities folder and is used to make that folder a Python package.\\n\\nSome key things about __init__.py files:\\n\\n- They tell Python that the directory they are in should be treated as a package. This allows submodules and modules within that directory to be imported.\\n\\n- They are usually empty, but can contain package-level code or import statements.\\n\\n- If a directory contains an __init__.py file, it becomes a Python package and modules within it may be imported via the package name.\\n\\nSo in summary:\\n\\n- The Utilities/__init__.py file makes the Utilities folder a Python package.\\n\\n- It allows any modules or subpackages within Utilities/ to be imported using the Utilities package name (e.g. import Utilities.some_module). \\n\\n- As a package initializer, it could define package-level functions, variables, import commonly used submodules etc. But often __init__.py files are left empty.\\n\\nSo its key function is to define the Utilities folder as a Python package, rather than just a directory, allowing internal reuse and import of its contents as a module. But it may not define any functions itself and often just serves this package declaration purpose.\&quot;}&quot;}" />
  </component>
</project>